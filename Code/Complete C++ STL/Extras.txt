bool comp(pair<int, int> p1, pair<int, int> p2){
    if(p1.second < p2.second) return true;
    if(p1.second < p2.second) return false;
    // they are same
    
    if(p1.first() > p2.first) return true;
    return false; 
}
void explainExtra(){
    sort(a, a+4); // {1,3,2,5} -> {1,2,3,5}
    sort(v.begin(), v.end()); //for vector
    
    sort(a+2,a+4); // {1,3,5,2} -> {1,3,2,5}
    
    sort(a,a+n,greater<int>);
    
    pair<int, int> a[] = {{1,2}, {2,1}, {4,1}};
    
    //sort it according to the second element 
    // if the second element is same, then sort it 
    // according to the first element but in desecnding
    
    sort(a, a+n, comp);
    //{{4,1} , {2,1}, {1,2}};
    
    int num = 7;
    int cnt = __builtin_popcount();
    
    long long num = 16455115456;
    int cnt = __builtin_popcountll();
    
    string s = "123";
    sort(s.begin(), s.end()); // if the string is unsorted
    
    do{
        cout<<s<<endl;
    } while (next_permutation(s.begin(), s.end()));
    
    int maximum = *max_element(a,a+n); // gives you the max element in the string
}