// priority_queue works as taking the priority elements first and prints the priority elements first
// Time complexities
	push -> O(logn)
   	top -> O(1)
   	pop -> O(logn)

void explainPQ(){
    //max heap
    priority_queue<int>pq;
    pq.push(5); // {5}
    pq.push(6); // {6, 5}
    pq.push(1); // {6, 5, 1}
    pq.push(9); // {9, 5, 6, 1}
    pq.emplace(10); // {10, 9, 5, 6, 1}
    
    cout<<pq.top()<<endl; //prints 10
    
    pq.pop(); // deletes 10
      
    cout<<pq.top()<<endl; // prints 9
    
    // size swap empty functions same as others
    
    
    //minimum heap
    priority_queue<int, vector<int>, greater<int>> pq;
    pq.push(5); // {5}
    pq.push(6); // {5, 6}
    pq.push(1); // {1, 5, 6}
    pq.push(9); // {1, 5, 6, 9}
    pq.emplace(10); // {1, 5, 6, 9, 10}
    
    cout<<pq.top(); // prints 1
}